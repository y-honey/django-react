clone:
  depth: full

definitions:
  services:
    docker:
      memory: 7128
    docker-small:
      type: docker
      memory: 1024
  caches:
    pnpmbackend: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmdocs: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmwebapp: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmwebappcore: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmwebappapiclient: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmwebappcontentful: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmwebappcruddemo: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmwebappdocuments: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmwebappnotifications: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmwebappemails: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmwebappfinances: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmwebappgenerativeai: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmworkers: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpminfracore: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpminfrashared: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpminfrafunctions: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmstatusdashboard: $BITBUCKET_CLONE_DIR/.pnpm-store
    pnpmtools: $BITBUCKET_CLONE_DIR/.pnpm-store
    clis: ~/.clicache
    sonar: ~/.sonar/cache

  scripts:
    initializeStep: &initializeStep cp .env.test .env
      && corepack enable
      && corepack prepare pnpm@7.25.0 --activate
      && export PNPM_HOME="/root/.local/share/pnpm"
      && export PATH="$PNPM_HOME:$PATH"

    setupAwsCli:
      &setupAwsCli export AWS_CLI_DEST_PATH=~/.clicache/awscli-2.8.8.zip
      && mkdir -p ~/.clicache/
      && wget --no-verbose --no-clobber "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.8.8.zip" --output-document "${AWS_CLI_DEST_PATH}" || true
      && unzip -qq "${AWS_CLI_DEST_PATH}"
      && /bin/bash ./aws/install
      && aws --version
    installWebappDeps: &installWebappDeps pnpm install
      --include-workspace-root
      --frozen-lockfile
      --filter=webapp...

  steps:
    - step: &codecommitPush
        name: Push code to CodeCommit
        clone:
          depth: full
        script:
          - git remote add codecommit "$CODE_COMMIT_REPO"
          - git push --force -u codecommit "$BITBUCKET_BRANCH"
          - git push codecommit --tags --force

    - step: &webappTest
        name: 'webapp: Lint & test'
        image: atlassian/default-image:4
        size: 2x
        script:
          - *initializeStep
          - *installWebappDeps
          - node_modules/.bin/nx run webapp:lint
          - node_modules/.bin/nx run webapp:type-check
          - node_modules/.bin/nx run webapp:test --watchAll=false --maxWorkers=20% --coverage
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WEBAPP_PROJECT_KEY: ${SONAR_WEBAPP_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/webapp'
        caches:
          - pnpmwebapp
          - clis
          - sonar
    - step: &webappBuild
        name: 'webapp: Build'
        image: atlassian/default-image:4
        script:
          - *initializeStep
          - *installWebappDeps
          - node_modules/.bin/nx run webapp:build
        caches:
          - pnpmwebapp
          - clis
    - step: &webappCoreTest
        name: 'webapp-core: Lint & test'
        image: atlassian/default-image:4
        size: 2x
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=webapp-core...
          - node_modules/.bin/nx run webapp-core:lint
          - node_modules/.bin/nx run webapp-core:type-check
          - node_modules/.bin/nx run webapp-core:test --watchAll=false --maxWorkers=20% --coverage
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WEBAPP_CORE_PROJECT_KEY: ${SONAR_WEBAPP_CORE_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/webapp-libs/webapp-core'
        caches:
          - pnpmwebappcore
          - clis
          - sonar
    - step: &webappApiClientTest
        name: 'webapp-api-client: Lint & test'
        image: atlassian/default-image:4
        size: 2x
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=webapp-api-client...
          - node_modules/.bin/nx run webapp-api-client:lint
          - node_modules/.bin/nx run webapp-api-client:type-check
          - node_modules/.bin/nx run webapp-api-client:test --watchAll=false --maxWorkers=20% --coverage
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WEBAPP_API_CLIENT_PROJECT_KEY: ${SONAR_WEBAPP_API_CLIENT_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/webapp-libs/webapp-api-client'
        caches:
          - pnpmwebappapiclient
          - clis
          - sonar
    - step: &webappContentfulTest
        name: 'webapp-contentful: Lint & test'
        image: atlassian/default-image:4
        size: 2x
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=webapp-contentful...
          - node_modules/.bin/nx run webapp-contentful:lint
          - node_modules/.bin/nx run webapp-contentful:type-check
          - node_modules/.bin/nx run webapp-contentful:test --watchAll=false --maxWorkers=20% --coverage
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WEBAPP_CONTENTFUL_PROJECT_KEY: ${SONAR_WEBAPP_CONTENTFUL_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/webapp-libs/webapp-contentful'
        caches:
          - pnpmwebappcontentful
          - clis
          - sonar
    - step: &webappCrudTest
        name: 'webapp-crud-demo: Lint & test'
        image: atlassian/default-image:4
        size: 2x
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=webapp-crud-demo...
          - node_modules/.bin/nx run webapp-crud-demo:lint
          - node_modules/.bin/nx run webapp-crud-demo:type-check
          - node_modules/.bin/nx run webapp-crud-demo:test --watchAll=false --maxWorkers=20% --coverage
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WEBAPP_CRUD_DEMO_PROJECT_KEY: ${SONAR_WEBAPP_CRUD_DEMO_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/webapp-libs/webapp-crud-demo'
        caches:
          - pnpmwebappcruddemo
          - clis
          - sonar
    - step: &webappDocsTest
        name: 'webapp-documents: Lint & test'
        image: atlassian/default-image:4
        size: 2x
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=webapp-documents...
          - node_modules/.bin/nx run webapp-documents:lint
          - node_modules/.bin/nx run webapp-documents:type-check
          - node_modules/.bin/nx run webapp-documents:test --watchAll=false --maxWorkers=20% --coverage
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WEBAPP_DOCUMENTS_PROJECT_KEY: ${SONAR_WEBAPP_DOCUMENTS_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/webapp-libs/webapp-documents'
        caches:
          - pnpmwebappdocuments
          - clis
          - sonar
    - step: &webappNotificationsTest
        name: 'webapp-notifications: Lint & test'
        image: atlassian/default-image:4
        size: 2x
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=webapp-notifications...
          - node_modules/.bin/nx run webapp-notifications:lint
          - node_modules/.bin/nx run webapp-notifications:type-check
          - node_modules/.bin/nx run webapp-notifications:test --watchAll=false --maxWorkers=20% --coverage
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WEBAPP_NOTIFICATIONS_PROJECT_KEY: ${SONAR_WEBAPP_NOTIFICATIONS_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/webapp-libs/webapp-notifications'
        caches:
          - pnpmwebappnotifications
          - clis
          - sonar
    - step: &webappEmailsTest
        name: 'webapp-emails: Lint & test'
        image: atlassian/default-image:4
        size: 2x
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=webapp-emails...
          - node_modules/.bin/nx run webapp-emails:lint
          - node_modules/.bin/nx run webapp-emails:type-check
          - node_modules/.bin/nx run webapp-emails:test --watchAll=false --maxWorkers=20% --coverage
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WEBAPP_EMAILS_PROJECT_KEY: ${SONAR_WEBAPP_EMAILS_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/webapp-libs/webapp-emails'
        caches:
          - pnpmwebappemails
          - clis
          - sonar
    - step: &webappFinancesTest
        name: 'webapp-finances: Lint & test'
        image: atlassian/default-image:4
        size: 2x
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=webapp-finances...
          - node_modules/.bin/nx run webapp-finances:lint
          - node_modules/.bin/nx run webapp-finances:type-check
          - node_modules/.bin/nx run webapp-finances:test --watchAll=false --maxWorkers=20% --coverage
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WEBAPP_FINANCES_PROJECT_KEY: ${SONAR_WEBAPP_FINANCES_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/webapp-libs/webapp-finances'
        caches:
          - pnpmwebappfinances
          - clis
          - sonar
    - step: &webappGenAiTest
        name: 'webapp-generative-ai: Lint & test'
        image: atlassian/default-image:4
        size: 2x
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=webapp-generative-ai...
          - node_modules/.bin/nx run webapp-generative-ai:lint
          - node_modules/.bin/nx run webapp-generative-ai:type-check
          - node_modules/.bin/nx run webapp-generative-ai:test --watchAll=false --maxWorkers=20% --coverage
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WEBAPP_GENERATIVE_AI_PROJECT_KEY: ${SONAR_WEBAPP_GENERATIVE_AI_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/webapp-libs/webapp-generative-ai'
        caches:
          - pnpmwebappgenerativeai
          - clis
          - sonar
    - step: &backendBuildAndTest
        name: 'backend: Build image & run tests'
        image: atlassian/default-image:3
        size: 2x
        script:
          - *initializeStep
          - *setupAwsCli
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=backend...
          - node_modules/.bin/nx run backend:lint:js
          - node_modules/.bin/nx run backend:test
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_BACKEND_PROJECT_KEY: ${SONAR_BACKEND_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/backend'
        services:
          - docker
        caches:
          - docker
          - pnpmbackend
          - clis
          - sonar

    - step: &workersTest
        name: 'async-workers: Lint & test'
        image: atlassian/default-image:3
        size: 2x
        script:
          - *initializeStep
          - *setupAwsCli
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=workers...
          - node_modules/.bin/nx run workers:lint
          - node_modules/.bin/nx run workers:test
          - if [ -z "${SONAR_ORGANIZATION}" ]; then exit 0; fi
          - pipe: sonarsource/sonarcloud-scan:1.4.0
            variables:
              SONAR_ORGANIZATION: ${SONAR_ORGANIZATION}
              SONAR_WORKERS_PROJECT_KEY: ${SONAR_WORKERS_PROJECT_KEY}
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=packages/workers'
        services:
          - docker
        caches:
          - docker
          - pnpmworkers
          - clis
          - sonar
    - step: &workersBuild
        name: 'async-workers: Build'
        image: atlassian/default-image:3
        size: 2x
        script:
          - *initializeStep
          - *setupAwsCli
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=workers...
            --filter=webapp-emails...
          - node_modules/.bin/nx run webapp-emails:build-vite
          - node_modules/.bin/nx run workers:build
        services:
          - docker
        caches:
          - docker
          - pnpmworkers
          - clis
          - sonar

    # Infra steps

    - step: &infraCoreBuild
        name: 'infra/infra-core: Lint & build'
        image: atlassian/default-image:4
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=infra-core...
          - node_modules/.bin/nx run infra-core:lint
          - node_modules/.bin/nx run infra-core:build
        caches:
          - pnpminfracore
          - clis

    - step: &infraSharedBuild
        name: 'infra/infra-shared: Lint & build'
        image: atlassian/default-image:4
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=infra-shared...
          - node_modules/.bin/nx run infra-shared:lint
          - node_modules/.bin/nx run infra-shared:build
        caches:
          - pnpminfrashared
          - clis

    - step: &infraFunctionsBuild
        name: 'infra/infra-functions: Lint & build'
        image: atlassian/default-image:4
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=infra-functions...
          - node_modules/.bin/nx run infra-functions:lint
          - node_modules/.bin/nx run infra-functions:build
        caches:
          - pnpminfrafunctions
          - clis

    # Internal steps

    - step: &internalDocsBuild
        name: 'internal/docs: Lint & build'
        image: atlassian/default-image:4
        script:
          - *initializeStep
          - *setupAwsCli
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=docs...
            --filter=backend...

          - export DOCKER_BUILDKIT=0  # Workaround for https://community.atlassian.com/t5/Jira-Work-Management-Questions/Can-t-run-compose-in-bitbucket-pipelines-getting-privileged-true/qaq-p/2233411
          - node_modules/.bin/nx run docs:lint
          - node_modules/.bin/nx run docs:build
        services:
          - docker-small
        caches:
          - pnpmdocs
          - pnpmbackend
          - clis

    - step: &internalStatusDashboardBuild
        name: 'internal/status-dashboard: Lint & build'
        image: atlassian/default-image:4
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=status-dashboard...
          - node_modules/.bin/nx run status-dashboard:lint
          - node_modules/.bin/nx run status-dashboard:build
        caches:
          - pnpmstatusdashboard
          - clis

    - step: &internalToolsBuild
        name: 'internal/tools: Lint'
        image: atlassian/default-image:4
        script:
          - *initializeStep
          - pnpm install
            --include-workspace-root
            --frozen-lockfile
            --filter=tools...
          - node_modules/.bin/nx run tools:lint
        caches:
          - pnpmtools
          - clis

pipelines:
  default:
    - parallel:
        - step: *codecommitPush

        - step: *webappTest
        - step: *webappBuild
        - step: *webappCoreTest
        - step: *webappApiClientTest
        - step: *webappContentfulTest
        - step: *webappCrudTest
        - step: *webappDocsTest
        - step: *webappNotificationsTest
        - step: *webappEmailsTest
        - step: *webappFinancesTest
        - step: *webappGenAiTest

        - step: *backendBuildAndTest

        - step: *workersTest
        - step: *workersBuild

        - step: *infraCoreBuild
        - step: *infraSharedBuild
        - step: *infraFunctionsBuild

        - step: *internalDocsBuild
        - step: *internalStatusDashboardBuild
        - step: *internalToolsBuild

  branches:
    master:
      - parallel:
        - step: *codecommitPush

        - step: *webappTest
        - step: *webappBuild
        - step: *webappCoreTest
        - step: *webappApiClientTest
        - step: *webappContentfulTest
        - step: *webappCrudTest
        - step: *webappDocsTest
        - step: *webappNotificationsTest
        - step: *webappEmailsTest
        - step: *webappFinancesTest
        - step: *webappGenAiTest

        - step: *backendBuildAndTest

        - step: *workersTest
        - step: *workersBuild

        - step: *infraCoreBuild
        - step: *infraSharedBuild
        - step: *infraFunctionsBuild

        - step: *internalDocsBuild
        - step: *internalStatusDashboardBuild
        - step: *internalToolsBuild
        - step:
            name: Delete unused branches from CodeCommit
            script:
              - /bin/bash packages/internal/tools/scripts/clean-codebuild-branches.sh
