stackName: "${env:PROJECT_NAME}-${self:provider.stage}-workers"

iam:
  - Effect: "Allow"
    Action:
      - "secretsmanager:GetRandomPassword"
      - "secretsmanager:CreateSecret"
      - "secretsmanager:ListSecrets"
    Resource: "*"
  - Effect: "Allow"
    Action:
      - "secretsmanager:*"
    Resource:
      { Fn::ImportValue: "${self:custom.projectEnvName}-databaseSecretArn" }
  - Effect: "Allow"
    Action:
      - "ses:SendEmail"
    Resource: "*"

environment:
  SENTRY_DSN: ${ssm:/${self:custom.ssmService}/SENTRY_DSN~true}

SendEmail:
  handler: emails/handlers.sendEmail
  environment:
    FROM_EMAIL: ${ssm:/${self:custom.ssmService}/FROM_EMAIL~true}
    WEB_APP_URL: ${ssm:/${self:custom.ssmService}/WEB_APP_URL~true}

SynchronizeContentfulContent:
  environment:
    DB_SECRET_ARN:
      { Fn::ImportValue: "${self:custom.projectEnvName}-databaseSecretArn" }
    CONTENTFUL_SPACE_ID: ${ssm:/${self:custom.ssmService}/CONTENTFUL_SPACE_ID~true}
    CONTENTFUL_ACCESS_TOKEN: ${ssm:/${self:custom.ssmService}/CONTENTFUL_ACCESS_TOKEN~true}
    CONTENTFUL_ENVIRONMENT: ${ssm:/${self:custom.ssmService}/CONTENTFUL_ENVIRONMENT~true}

vpc:
  securityGroupIds:
    - Fn::ImportValue: "${self:custom.projectEnvName}-lambdaSecurityGroupId"
  subnetIds:
    - Fn::ImportValue: "${self:custom.projectEnvName}-privateSubnetOneId"
    - Fn::ImportValue: "${self:custom.projectEnvName}-privateSubnetTwoId"
