service: "${env:PROJECT_NAME}-workers"

provider:
  name: aws
  runtime: python3.8
  versionFunctions: false
  region: "${env:AWS_DEFAULT_REGION}"

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - "secretsmanager:GetRandomPassword"
        - "secretsmanager:CreateSecret"
        - "secretsmanager:ListSecrets"
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - "secretsmanager:*"
      Resource: { Fn::ImportValue: '${self:custom.projectEnvName}-databaseSecretArn' }

functions:
  hello:
    handler: userauth.handlers.hello
    timeout: 6
    memorySize: 256
    environment:
      # Do not put DB_SECRET_ARN in global environments. This will make all functions try to connect to DB
      DB_SECRET_ARN: { Fn::ImportValue: '${self:custom.projectEnvName}-databaseSecretArn' }
    vpc:
      securityGroupIds:
        - Fn::ImportValue: '${self:custom.projectEnvName}-lambdaSecurityGroupId'
      subnetIds:
        - Fn::ImportValue: '${self:custom.projectEnvName}-publicSubnetOneId'
        - Fn::ImportValue: '${self:custom.projectEnvName}-publicSubnetTwoId'

  SendEmail:
    handler: emails.handlers.send_email
    timeout: 6
    memorySize: 128
    environment:
      FROM_EMAIL: ''
    events:
      - eventBridge:
          eventBus: '${self:custom.eventBusArn}'
          pattern:
            source:
              - backend.email

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements

custom:
  projectEnvName: '${env:PROJECT_NAME}-${env:ENV_STAGE}'
  eventBusArn: 'arn:aws:events:#{AWS::Region}:#{AWS::AccountId}:event-bus/${self:custom.projectEnvName}-workers'
  pythonRequirements:
    dockerizePip: non-linux
    useDownloadCache: true
    useStaticCache: true
