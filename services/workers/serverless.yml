service: "${env:PROJECT_NAME}-workers"

provider:
  name: aws
  runtime: python3.8
  versionFunctions: false
  stage: ${opt:stage, 'local'}
  region: "${env:AWS_DEFAULT_REGION}"
  stackName: ${file(./${self:custom.confFile.${self:provider.stage}}):stackName}
  iamRoleStatements: ${file(./${self:custom.confFile.${self:provider.stage}}):iam}
  environment: ${file(./${self:custom.confFile.${self:provider.stage}}):environment}

functions:
  SendEmail:
    handler: emails.handlers.send_email
    timeout: 6
    memorySize: 128
    environment: ${file(./${self:custom.confFile.${self:provider.stage}}):envsSendEmail}
    events:
      - eventBridge:
          eventBus: "${self:custom.eventBusArn}"
          pattern:
            source:
              - backend.email

  SynchronizeContentfulContent:
    handler: content.handlers.synchronize_content
    timeout: 30
    memorySize: 256
    environment: ${file(./${self:custom.confFile.${self:provider.stage}}):envsSynchronizeContentfulContent}
    vpc: ${file(./${self:custom.confFile.${self:provider.stage}}):vpc}
    events:
      - schedule: rate(5 minutes)
      - eventBridge:
          eventBus: "${self:custom.eventBusArn}"
          pattern:
            source:
              - backend.contentfulSync

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements

custom:
  projectEnvName: "${env:PROJECT_NAME}-${env:ENV_STAGE}"
  eventBusArn: "arn:aws:events:#{AWS::Region}:#{AWS::AccountId}:event-bus/${self:custom.projectEnvName}-workers"
  pythonRequirements:
    dockerizePip: non-linux
    useDownloadCache: true
    useStaticCache: false

  ssmService: env-${env:PROJECT_NAME}-${self:provider.stage}-workers

  confFile:
    local: workers.conf.local.yml
    dev: workers.conf.yml
    qa: workers.conf.yml
    prod: workers.conf.yml

package:
  exclude:
    - .git/**
    - node_modules/**
