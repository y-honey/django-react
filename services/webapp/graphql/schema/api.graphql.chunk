schema {
  query: Query
  mutation: ApiMutation
  subscription: ApiSubscription
}

type ApiMutation {
  changeActiveSubscription(input: ChangeActiveSubscriptionMutationInput!): ChangeActiveSubscriptionMutationPayload
  cancelActiveSubscription(input: CancelActiveSubscriptionMutationInput!): CancelActiveSubscriptionMutationPayload
  updateDefaultPaymentMethod(input: UpdateDefaultPaymentMethodMutationInput!): UpdateDefaultPaymentMethodMutationPayload
  deletePaymentMethod(input: DeletePaymentMethodMutationInput!): DeletePaymentMethodMutationPayload
  updateCurrentUser(input: UpdateCurrentUserMutationInput!): UpdateCurrentUserMutationPayload
  tokenAuth(input: ObtainTokenMutationInput!): ObtainTokenMutationPayload
  signUp(input: SingUpMutationInput!): SingUpMutationPayload
  updateNotification(input: UpdateNotificationMutationInput!): UpdateNotificationMutationPayload
  markReadAllNotifications(input: MarkReadAllNotificationsMutationInput!): MarkReadAllNotificationsMutationPayload
  createCrudDemoItem(input: CreateCrudDemoItemMutationInput!): CreateCrudDemoItemMutationPayload
  updateCrudDemoItem(input: UpdateCrudDemoItemMutationInput!): UpdateCrudDemoItemMutationPayload
  deleteCrudDemoItem(input: DeleteCrudDemoItemMutationInput!): DeleteCrudDemoItemMutationPayload
  createDocumentDemoItem(input: CreateDocumentDemoItemMutationInput!): CreateDocumentDemoItemMutationPayload
  deleteDocumentDemoItem(input: DeleteDocumentDemoItemMutationInput!): DeleteDocumentDemoItemMutationPayload
  createFavoriteContentfulDemoItem(input: CreateFavoriteContentfulDemoItemMutationInput!): CreateFavoriteContentfulDemoItemMutationPayload
  deleteFavoriteContentfulDemoItem(input: DeleteFavoriteContentfulDemoItemMutationInput!): DeleteFavoriteContentfulDemoItemMutationPayload
}

type ApiSubscription {
  notificationCreated(before: String, after: String, first: Int, last: Int): NotificationConnection
}

input CancelActiveSubscriptionMutationInput {
  clientMutationId: String
}

type CancelActiveSubscriptionMutationPayload {
  subscriptionSchedule: SubscriptionScheduleType
  subscriptionScheduleEdge: SubscriptionScheduleEdge
  clientMutationId: String
}

input ChangeActiveSubscriptionMutationInput {
  price: String!
  clientMutationId: String
}

type ChangeActiveSubscriptionMutationPayload {
  subscriptionSchedule: SubscriptionScheduleType
  subscriptionScheduleEdge: SubscriptionScheduleEdge
  clientMutationId: String
}

type ContentfulDemoItemFavoriteConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ContentfulDemoItemFavoriteEdge]!
}

"""A Relay edge containing a `ContentfulDemoItemFavorite` and its cursor."""
type ContentfulDemoItemFavoriteEdge {
  """The item at the end of the edge"""
  node: ContentfulDemoItemFavoriteType

  """A cursor for use in pagination"""
  cursor: String!
}

type ContentfulDemoItemFavoriteType implements Node {
  """The ID of the object."""
  id: ID!
  item: ContentfulDemoItemType!
  user: CurrentUserType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContentfulDemoItemFavoriteTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ContentfulDemoItemFavoriteTypeEdge]!
}

"""
A Relay edge containing a `ContentfulDemoItemFavoriteType` and its cursor.
"""
type ContentfulDemoItemFavoriteTypeEdge {
  """The item at the end of the edge"""
  node: ContentfulDemoItemFavoriteType

  """A cursor for use in pagination"""
  cursor: String!
}

type ContentfulDemoItemType implements Node {
  """The ID of the object."""
  id: ID!
  fields: JSONString!
  isPublished: Boolean!
  contentfuldemoitemfavoriteSet(offset: Int, before: String, after: String, first: Int, last: Int): ContentfulDemoItemFavoriteTypeConnection!
  pk: String
}

input CreateCrudDemoItemMutationInput {
  name: String!
  createdBy: String
  clientMutationId: String
}

type CreateCrudDemoItemMutationPayload {
  crudDemoItem: CrudDemoItemType
  crudDemoItemEdge: CrudDemoItemEdge
  clientMutationId: String
}

input CreateDocumentDemoItemMutationInput {
  file: Upload
  createdBy: String
  clientMutationId: String
}

type CreateDocumentDemoItemMutationPayload {
  documentDemoItem: DocumentDemoItemType
  documentDemoItemEdge: DocumentDemoItemEdge
  clientMutationId: String
}

input CreateFavoriteContentfulDemoItemMutationInput {
  item: String!
  user: String
  clientMutationId: String
}

type CreateFavoriteContentfulDemoItemMutationPayload {
  contentfulDemoItemFavorite: ContentfulDemoItemFavoriteType
  contentfulDemoItemFavoriteEdge: ContentfulDemoItemFavoriteEdge
  clientMutationId: String
}

type CrudDemoItemConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CrudDemoItemEdge]!
}

"""A Relay edge containing a `CrudDemoItem` and its cursor."""
type CrudDemoItemEdge {
  """The item at the end of the edge"""
  node: CrudDemoItemType

  """A cursor for use in pagination"""
  cursor: String!
}

type CrudDemoItemType implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  createdBy: CurrentUserType
}

"""A Relay edge containing a `CurrentUser` and its cursor."""
type CurrentUserEdge {
  """The item at the end of the edge"""
  node: UserProfileType

  """A cursor for use in pagination"""
  cursor: String!
}

type CurrentUserType {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  roles: [String]
  avatar: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""The `Decimal` scalar type represents a python Decimal."""
scalar Decimal

input DeleteCrudDemoItemMutationInput {
  id: String
  clientMutationId: String
}

type DeleteCrudDemoItemMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}

input DeleteDocumentDemoItemMutationInput {
  id: String
  clientMutationId: String
}

type DeleteDocumentDemoItemMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}

input DeleteFavoriteContentfulDemoItemMutationInput {
  item: String
  clientMutationId: String
}

type DeleteFavoriteContentfulDemoItemMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}

input DeletePaymentMethodMutationInput {
  id: String
  clientMutationId: String
}

type DeletePaymentMethodMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}

type DocumentDemoItemConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [DocumentDemoItemEdge]!
}

"""A Relay edge containing a `DocumentDemoItem` and its cursor."""
type DocumentDemoItemEdge {
  """The item at the end of the edge"""
  node: DocumentDemoItemType

  """A cursor for use in pagination"""
  cursor: String!
}

type DocumentDemoItemType implements Node {
  """The ID of the object."""
  id: ID!
  file: FileFieldType
  createdBy: CurrentUserType
  createdAt: DateTime!
}

type FileFieldType {
  url: String
  name: String
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

input MarkReadAllNotificationsMutationInput {
  clientMutationId: String
}

type MarkReadAllNotificationsMutationPayload {
  ok: Boolean
  clientMutationId: String
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type NotificationConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [NotificationEdge]!
}

"""A Relay edge containing a `Notification` and its cursor."""
type NotificationEdge {
  """The item at the end of the edge"""
  node: NotificationType

  """A cursor for use in pagination"""
  cursor: String!
}

type NotificationType implements Node {
  """The ID of the object."""
  id: ID!
  user: CurrentUserType!
  type: String!
  createdAt: DateTime!
  readAt: DateTime
  data: GenericScalar
}

input ObtainTokenMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type ObtainTokenMutationPayload {
  access: String
  refresh: String
  clientMutationId: String
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaymentMethodConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PaymentMethodEdge]!
}

"""A Relay edge containing a `PaymentMethod` and its cursor."""
type PaymentMethodEdge {
  """The item at the end of the edge"""
  node: StripePaymentMethodType

  """A cursor for use in pagination"""
  cursor: String!
}

"""An enumeration."""
enum PaymentMethodType {
  """Acss Dbit"""
  ACSS_DEBIT

  """Afterpay Clearpay"""
  AFTERPAY_CLEARPAY

  """Alipay"""
  ALIPAY

  """BECS Debit (Australia)"""
  AU_BECS_DEBIT

  """Bacs Direct Debit"""
  BACS_DEBIT

  """Bancontact"""
  BANCONTACT

  """Boleto"""
  BOLETO

  """Card"""
  CARD

  """Card present"""
  CARD_PRESENT

  """EPS"""
  EPS

  """FPX"""
  FPX

  """Giropay"""
  GIROPAY

  """Grabpay"""
  GRABPAY

  """iDEAL"""
  IDEAL

  """Interac (card present)"""
  INTERAC_PRESENT

  """Klarna"""
  KLARNA

  """OXXO"""
  OXXO

  """Przelewy24"""
  P24

  """SEPA Direct Debit"""
  SEPA_DEBIT

  """SOFORT"""
  SOFORT

  """Wechat Pay"""
  WECHAT_PAY
}

"""An enumeration."""
enum PriceBillingScheme {
  """Per-unit"""
  PER_UNIT

  """Tiered"""
  TIERED
}

"""An enumeration."""
enum PriceTiersMode {
  """Graduated"""
  GRADUATED

  """Volume-based"""
  VOLUME
}

"""An enumeration."""
enum PriceType {
  """One-time"""
  ONE_TIME

  """Recurring"""
  RECURRING
}

"""An enumeration."""
enum ProductType {
  """Good"""
  GOOD

  """Service"""
  SERVICE
}

type Query {
  allSubscriptionPlans(before: String, after: String, first: Int, last: Int): SubscriptionPlanConnection
  activeSubscription: SubscriptionScheduleType
  allPaymentMethods(before: String, after: String, first: Int, last: Int): PaymentMethodConnection
  currentUser: CurrentUserType
  hasUnreadNotifications: Boolean
  allNotifications(before: String, after: String, first: Int, last: Int): NotificationConnection
  crudDemoItem(
    """The ID of the object"""
    id: ID!
  ): CrudDemoItemType
  allCrudDemoItems(before: String, after: String, first: Int, last: Int): CrudDemoItemConnection
  allContentfulDemoItemFavorites(before: String, after: String, first: Int, last: Int): ContentfulDemoItemFavoriteConnection
  allDocumentDemoItems(before: String, after: String, first: Int, last: Int): DocumentDemoItemConnection
  node(
    """The ID of the object"""
    id: ID!
  ): Node
}

input SingUpMutationInput {
  id: String
  email: String!
  password: String!
  clientMutationId: String
}

type SingUpMutationPayload {
  id: String
  email: String
  access: String
  refresh: String
  clientMutationId: String
}

type StripePaymentMethodType implements Node {
  """The ID of the object."""
  id: ID!
  billingDetails: GenericScalar

  """The type of the PaymentMethod."""
  type: PaymentMethodType!
  card: GenericScalar
  pk: String
}

type StripeProductType implements Node {
  djstripeCreated: DateTime!
  djstripeUpdated: DateTime!
  djstripeId: ID!

  """The ID of the object."""
  id: ID!

  """
  Null here indicates that the livemode status is unknown or was previously
  unrecorded. Otherwise, this field indicates whether this record comes from
  Stripe test mode or live mode operation.
  """
  livemode: Boolean

  """The datetime this object was created in stripe."""
  created: DateTime

  """
  A set of key/value pairs that you can attach to an object. It can be useful
  for storing additional information about an object in a structured format.
  """
  metadata: String

  """A description of this object."""
  description: String

  """
  The product's name, meant to be displayable to the customer. Applicable to both `service` and `good` types.
  """
  name: String!

  """
  The type of the product. The product is either of type `good`, which is
  eligible for use with Orders and SKUs, or `service`, which is eligible for use
  with Subscriptions and Plans.
  """
  type: ProductType!

  """
  Whether the product is currently available for purchase. Only applicable to products of `type=good`.
  """
  active: Boolean

  """
  A list of up to 5 attributes that each SKU can provide values for (e.g.,
  `["color", "size"]`). Only applicable to products of `type=good`.
  """
  attributes: String

  """
  A short one-line description of the product, meant to be displayableto the
  customer. Only applicable to products of `type=good`.
  """
  caption: String!

  """
  An array of connect application identifiers that cannot purchase this product. Only applicable to products of `type=good`.
  """
  deactivateOn: String

  """
  A list of up to 8 URLs of images for this product, meant to be displayable to
  the customer. Only applicable to products of `type=good`.
  """
  images: String

  """
  The dimensions of this product for shipping purposes. A SKU associated with
  this product can override this value by having its own `package_dimensions`.
  Only applicable to products of `type=good`.
  """
  packageDimensions: String

  """
  Whether this product is a shipped good. Only applicable to products of `type=good`.
  """
  shippable: Boolean

  """
  A URL of a publicly-accessible webpage for this product. Only applicable to products of `type=good`.
  """
  url: String

  """
  Extra information about a product which will appear on your customer's credit
  card statement. In the case that multiple products are billed at once, the
  first statement descriptor will be used. Only available on products of
  type=`service`.
  """
  statementDescriptor: String!
  unitLabel: String!

  """The product this price is associated with."""
  prices(offset: Int, before: String, after: String, first: Int, last: Int): SubscriptionPlanTypeConnection!
  pk: String
}

type StripeSubscriptionType implements Node {
  """The ID of the object."""
  id: ID!

  """
  End of the current period for which the subscription has been invoiced. At the
  end of this period, a new invoice will be created.
  """
  currentPeriodEnd: DateTime!

  """
  Start of the current period for which the subscription has been invoiced.
  """
  currentPeriodStart: DateTime!

  """
  Date when the subscription was first created. The date might differ from the created date due to backdating.
  """
  startDate: DateTime

  """The status of this subscription."""
  status: SubscriptionStatus!

  """If the subscription has a trial, the end of that trial."""
  trialEnd: DateTime

  """If the subscription has a trial, the beginning of that trial."""
  trialStart: DateTime
  pk: String
}

type StripeSubscriptionTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [StripeSubscriptionTypeEdge]!
}

"""A Relay edge containing a `StripeSubscriptionType` and its cursor."""
type StripeSubscriptionTypeEdge {
  """The item at the end of the edge"""
  node: StripeSubscriptionType

  """A cursor for use in pagination"""
  cursor: String!
}

type SubscriptionPlanConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SubscriptionPlanEdge]!
}

"""A Relay edge containing a `SubscriptionPlan` and its cursor."""
type SubscriptionPlanEdge {
  """The item at the end of the edge"""
  node: SubscriptionPlanType

  """A cursor for use in pagination"""
  cursor: String!
}

type SubscriptionPlanType implements Node {
  djstripeCreated: DateTime!
  djstripeUpdated: DateTime!
  djstripeId: ID!

  """The ID of the object."""
  id: ID!

  """
  Null here indicates that the livemode status is unknown or was previously
  unrecorded. Otherwise, this field indicates whether this record comes from
  Stripe test mode or live mode operation.
  """
  livemode: Boolean

  """The datetime this object was created in stripe."""
  created: DateTime

  """
  A set of key/value pairs that you can attach to an object. It can be useful
  for storing additional information about an object in a structured format.
  """
  metadata: String

  """A description of this object."""
  description: String

  """Whether the price can be used for new purchases."""
  active: Boolean!

  """Three-letter ISO currency code"""
  currency: String!

  """A brief description of the plan, hidden from customers."""
  nickname: String!

  """The product this price is associated with."""
  product: StripeProductType!

  """
  The recurring components of a price such as `interval` and `usage_type`.
  """
  recurring: String

  """
  Whether the price is for a one-time purchase or a recurring (subscription) purchase.
  """
  type: PriceType!

  """
  The unit amount in cents to be charged, represented as a whole integer if
  possible. Null if a sub-cent precision is required.
  """
  unitAmount: Int

  """
  The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places.
  """
  unitAmountDecimal: Decimal

  """
  Describes how to compute the price per period. Either `per_unit` or `tiered`.
  `per_unit` indicates that the fixed amount (specified in `unit_amount` or
  `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with
  `usage_type=licensed`), or per unit of total usage (for prices with
  `usage_type=metered`). `tiered` indicates that the unit pricing will be
  computed using a tiering strategy as defined using the `tiers` and
  `tiers_mode` attributes.
  """
  billingScheme: PriceBillingScheme

  """A lookup key used to retrieve prices dynamically from a static string."""
  lookupKey: String

  """
  Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`.
  """
  tiers: String

  """
  Defines if the tiering price should be `graduated` or `volume` based. In
  `volume`-based tiering, the maximum quantity within a period determines the
  per unit price, in `graduated` tiering pricing can successively change as the
  quantity grows.
  """
  tiersMode: PriceTiersMode

  """
  Apply a transformation to the reported usage or set quantity before computing
  the amount billed. Cannot be combined with `tiers`.
  """
  transformQuantity: String
  pk: String
}

type SubscriptionPlanTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SubscriptionPlanTypeEdge]!
}

"""A Relay edge containing a `SubscriptionPlanType` and its cursor."""
type SubscriptionPlanTypeEdge {
  """The item at the end of the edge"""
  node: SubscriptionPlanType

  """A cursor for use in pagination"""
  cursor: String!
}

"""A Relay edge containing a `SubscriptionSchedule` and its cursor."""
type SubscriptionScheduleEdge {
  """The item at the end of the edge"""
  node: SubscriptionScheduleType

  """A cursor for use in pagination"""
  cursor: String!
}

"""An enumeration."""
enum SubscriptionScheduleEndBehavior {
  """Cancel"""
  CANCEL

  """Release"""
  RELEASE
}

type SubscriptionSchedulePhaseItemType {
  price: SubscriptionPlanType
  quantity: Int
}

type SubscriptionSchedulePhaseType {
  startDate: DateTime
  endDate: String
  trialEnd: String
  item: SubscriptionSchedulePhaseItemType
}

"""An enumeration."""
enum SubscriptionScheduleStatus {
  """Active"""
  ACTIVE

  """Canceled"""
  CANCELED

  """Completed"""
  COMPLETED

  """Not started"""
  NOT_STARTED

  """Released"""
  RELEASED
}

type SubscriptionScheduleType implements Node {
  djstripeCreated: DateTime!
  djstripeUpdated: DateTime!
  djstripeId: ID!

  """The ID of the object."""
  id: ID!

  """
  Null here indicates that the livemode status is unknown or was previously
  unrecorded. Otherwise, this field indicates whether this record comes from
  Stripe test mode or live mode operation.
  """
  livemode: Boolean

  """The datetime this object was created in stripe."""
  created: DateTime

  """
  A set of key/value pairs that you can attach to an object. It can be useful
  for storing additional information about an object in a structured format.
  """
  metadata: String

  """A description of this object."""
  description: String

  """
  Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period.
  """
  billingThresholds: String

  """Time at which the subscription schedule was canceled."""
  canceledAt: DateTime

  """Time at which the subscription schedule was completed."""
  completedAt: DateTime

  """
  Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
  """
  currentPhase: String

  """Object representing the subscription schedule's default settings."""
  defaultSettings: String

  """
  Behavior of the subscription schedule and underlying subscription when it ends.
  """
  endBehavior: SubscriptionScheduleEndBehavior!
  phases: [SubscriptionSchedulePhaseType]

  """Time at which the subscription schedule was released."""
  releasedAt: DateTime

  """
  The subscription once managed by this subscription schedule (if it is released).
  """
  releasedSubscription: StripeSubscriptionType

  """
  The present status of the subscription schedule. Possible values are
  `not_started`, `active`, `completed`, `released`, and `canceled`.
  """
  status: SubscriptionScheduleStatus!

  """The schedule associated with this subscription."""
  subscriptions(offset: Int, before: String, after: String, first: Int, last: Int): StripeSubscriptionTypeConnection!
  subscription: StripeSubscriptionType
  defaultPaymentMethod: StripePaymentMethodType
  canActivateTrial: Boolean
}

"""An enumeration."""
enum SubscriptionStatus {
  """Active"""
  ACTIVE

  """Canceled"""
  CANCELED

  """Incomplete"""
  INCOMPLETE

  """Incomplete Expired"""
  INCOMPLETE_EXPIRED

  """Past due"""
  PAST_DUE

  """Trialing"""
  TRIALING

  """Unpaid"""
  UNPAID
}

input UpdateCrudDemoItemMutationInput {
  name: String!
  createdBy: String
  id: ID!
  clientMutationId: String
}

type UpdateCrudDemoItemMutationPayload {
  crudDemoItem: CrudDemoItemType
  crudDemoItemEdge: CrudDemoItemEdge
  clientMutationId: String
}

input UpdateCurrentUserMutationInput {
  firstName: String
  lastName: String
  avatar: Upload
  clientMutationId: String
}

type UpdateCurrentUserMutationPayload {
  userProfile: UserProfileType
  userProfileEdge: CurrentUserEdge
  clientMutationId: String
}

input UpdateDefaultPaymentMethodMutationInput {
  id: String
  clientMutationId: String
}

type UpdateDefaultPaymentMethodMutationPayload {
  activeSubscription: SubscriptionScheduleType
  paymentMethodEdge: PaymentMethodEdge
  clientMutationId: String
}

input UpdateNotificationMutationInput {
  isRead: Boolean
  id: ID!
  clientMutationId: String
}

type UpdateNotificationMutationPayload {
  notification: NotificationType
  notificationEdge: NotificationEdge
  hasUnreadNotifications: Boolean
  clientMutationId: String
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

type UserProfileType implements Node {
  """The ID of the object."""
  id: ID!
  user: CurrentUserType!
  firstName: String!
  lastName: String!
}

