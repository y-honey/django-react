schema {
  query: Query
  mutation: ApiMutation
  subscription: ApiSubscription
}

type ApiMutation {
  updateNotification(input: UpdateNotificationMutationInput!): UpdateNotificationMutationPayload
  markReadAllNotifications(input: MarkReadAllNotificationsMutationInput!): MarkReadAllNotificationsMutationPayload
  createCrudDemoItem(input: CreateCrudDemoItemMutationInput!): CreateCrudDemoItemMutationPayload
  updateCrudDemoItem(input: UpdateCrudDemoItemMutationInput!): UpdateCrudDemoItemMutationPayload
  deleteCrudDemoItem(input: DeleteCrudDemoItemMutationInput!): DeleteCrudDemoItemMutationPayload
  createDocumentDemoItem(input: CreateDocumentDemoItemMutationInput!): CreateDocumentDemoItemMutationPayload
  deleteDocumentDemoItem(input: DeleteDocumentDemoItemMutationInput!): DeleteDocumentDemoItemMutationPayload
}

type ApiSubscription {
  notificationCreated(before: String, after: String, first: Int, last: Int): NotificationConnection
}

input CreateCrudDemoItemMutationInput {
  name: String!
  createdBy: String
  clientMutationId: String
}

type CreateCrudDemoItemMutationPayload {
  crudDemoItem: CrudDemoItemType
  crudDemoItemEdge: CrudDemoItemEdge
  clientMutationId: String
}

input CreateDocumentDemoItemMutationInput {
  file: Upload
  createdBy: String
  clientMutationId: String
}

type CreateDocumentDemoItemMutationPayload {
  documentDemoItem: DocumentDemoItemType
  documentDemoItemEdge: DocumentDemoItemEdge
  clientMutationId: String
}

type CrudDemoItemConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CrudDemoItemEdge]!
}

"""A Relay edge containing a `CrudDemoItem` and its cursor."""
type CrudDemoItemEdge {
  """The item at the end of the edge"""
  node: CrudDemoItemType

  """A cursor for use in pagination"""
  cursor: String!
}

type CrudDemoItemType implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DeleteCrudDemoItemMutationInput {
  id: String
  clientMutationId: String
}

type DeleteCrudDemoItemMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}

input DeleteDocumentDemoItemMutationInput {
  id: String
  clientMutationId: String
}

type DeleteDocumentDemoItemMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}

type DocumentDemoItemConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [DocumentDemoItemEdge]!
}

"""A Relay edge containing a `DocumentDemoItem` and its cursor."""
type DocumentDemoItemEdge {
  """The item at the end of the edge"""
  node: DocumentDemoItemType

  """A cursor for use in pagination"""
  cursor: String!
}

type DocumentDemoItemType implements Node {
  """The ID of the object."""
  id: ID!
  file: FileFieldType
  createdAt: DateTime!
}

type FileFieldType {
  url: String
  name: String
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

input MarkReadAllNotificationsMutationInput {
  clientMutationId: String
}

type MarkReadAllNotificationsMutationPayload {
  ok: Boolean
  clientMutationId: String
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type NotificationConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [NotificationEdge]!
}

"""A Relay edge containing a `Notification` and its cursor."""
type NotificationEdge {
  """The item at the end of the edge"""
  node: NotificationType

  """A cursor for use in pagination"""
  cursor: String!
}

type NotificationType implements Node {
  """The ID of the object."""
  id: ID!
  type: String!
  createdAt: DateTime!
  readAt: DateTime
  data: GenericScalar
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  hasUnreadNotifications: Boolean
  allNotifications(before: String, after: String, first: Int, last: Int): NotificationConnection
  crudDemoItem(
    """The ID of the object"""
    id: ID!
  ): CrudDemoItemType
  allCrudDemoItems(before: String, after: String, first: Int, last: Int): CrudDemoItemConnection
  allDocumentDemoItems(before: String, after: String, first: Int, last: Int): DocumentDemoItemConnection
  node(
    """The ID of the object"""
    id: ID!
  ): Node
}

input UpdateCrudDemoItemMutationInput {
  name: String!
  createdBy: String
  id: ID!
  clientMutationId: String
}

type UpdateCrudDemoItemMutationPayload {
  crudDemoItem: CrudDemoItemType
  crudDemoItemEdge: CrudDemoItemEdge
  clientMutationId: String
}

input UpdateNotificationMutationInput {
  isRead: Boolean
  id: ID!
  clientMutationId: String
}

type UpdateNotificationMutationPayload {
  notification: NotificationType
  notificationEdge: NotificationEdge
  hasUnreadNotifications: Boolean
  clientMutationId: String
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

