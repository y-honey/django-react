import { expectSaga } from 'redux-saga-test-plan';
import { StatusCodes } from 'http-status-codes';
import { watch{{ pascalCase name }} } from '../{{ camelCase name }}.sagas';
import { {{ camelCase name }}Actions } from '..';
import { {{ camelCase name }}Factory } from '../../../mocks/factories';
import { server } from '../../../mocks/server';
import {
  mockAdd{{ pascalCase name }},
  mockGet{{ pascalCase name }},
  mockGet{{ pascalCase name }}List,
  mockUpdate{{ pascalCase name }},
} from '../../../mocks/server/handlers';
import { prepareState } from '../../../mocks/store';

const items = [{{ camelCase name }}Factory(), {{ camelCase name }}Factory(), {{ camelCase name }}Factory()];

describe('{{ pascalCase name }}: sagas', () => {
  const defaultState = prepareState((state) => state);

  describe('fetch{{ pascalCase name }}', () => {
    it('should resolve action with fetched items', async () => {
      server.use(mockGet{{ pascalCase name }}List(items));

      await expectSaga(watch{{ pascalCase name }})
        .withState(defaultState)
        .put({{ camelCase name }}Actions.fetch{{ pascalCase name }}List.resolved(items))
        .dispatch({{ camelCase name }}Actions.fetch{{ pascalCase name }}List())
        .silentRun();
    });
  });

  describe('fetch{{ pascalCase name }}', () => {
    it('should resolve action with fetched item', async () => {
      const item = items[0];
      server.use(mockGet{{ pascalCase name }}(item.id, item));

      await expectSaga(watch{{ pascalCase name }})
        .withState(defaultState)
        .put({{ camelCase name }}Actions.fetch{{ pascalCase name }}.resolved(item))
        .dispatch({{ camelCase name }}Actions.fetch{{ pascalCase name }}(item.id))
        .silentRun();
    });
  });

  describe('add{{ pascalCase name }}', () => {
    it('should resolve action when completed', async () => {
      const item = items[0];
      server.use(mockAdd{{ pascalCase name }}({ isError: false, ...item }));

      await expectSaga(watch{{ pascalCase name }})
        .withState(defaultState)
        .put({{ camelCase name }}Actions.add{{ pascalCase name }}.resolved({ isError: false, ...item }))
        .dispatch({{ camelCase name }}Actions.add{{ pascalCase name }}(item))
        .silentRun();
    });

    it('should resolve action with error when failed with BAD_REQUEST', async () => {
      const item = items[0];
      server.use(mockAdd{{ pascalCase name }}({ isError: true, nonFieldErrors: [{ code: 'error', message: 'error' }] }, StatusCodes.BAD_REQUEST));

      await expectSaga(watch{{ pascalCase name }})
        .withState(defaultState)
        .put({{ camelCase name }}Actions.add{{ pascalCase name }}.resolved({ isError: true, nonFieldErrors: [{ code: 'error', message: 'error' }] }))
        .dispatch({{ camelCase name }}Actions.add{{ pascalCase name }}(item))
        .silentRun();
    });
  });

  describe('update{{ pascalCase name }}', () => {
    it('should resolve action when completed', async () => {
      const item = items[0];
      server.use(mockUpdate{{ pascalCase name }}(item.id, { isError: false, ...item }));

      await expectSaga(watch{{ pascalCase name }})
        .withState(defaultState)
        .put({{ camelCase name }}Actions.update{{ pascalCase name }}.resolved({ isError: false, ...item }))
        .dispatch({{ camelCase name }}Actions.update{{ pascalCase name }}(item))
        .silentRun();
    });

    it('should resolve action with error when failed with BAD_REQUEST', async () => {
      const item = items[0];
      server.use(mockUpdate{{ pascalCase name }}(item.id, { isError: true, nonFieldErrors: [{ code: 'error', message: 'error' }] }, StatusCodes.BAD_REQUEST));

      await expectSaga(watch{{ pascalCase name }})
        .withState(defaultState)
        .put({{ camelCase name }}Actions.update{{ pascalCase name }}.resolved({ isError: true, nonFieldErrors: [{ code: 'error', message: 'error' }] }))
        .dispatch({{ camelCase name }}Actions.update{{ pascalCase name }}(item))
        .silentRun();
    });
  });
});
