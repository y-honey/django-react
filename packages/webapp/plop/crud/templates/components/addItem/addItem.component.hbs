import { useMutation } from '@apollo/client';
import { gql } from '@sb/webapp-api-client/graphql';
import { PageHeadline } from '@sb/webapp-core/components/pageHeadline';
import { PageLayout } from '@sb/webapp-core/components/pageLayout';
import { useGenerateLocalePath } from '@sb/webapp-core/hooks';
import { trackEvent } from '@sb/webapp-core/services/analytics';
import { useToast } from '@sb/webapp-core/toast/useToast';
import { FormattedMessage, useIntl } from 'react-intl';
import { useNavigate } from 'react-router';

import { RoutesConfig } from '../../../config/routes';
import { {{ pascalCase name }}Form } from '../{{ pascalCase name }}Form/{{ pascalCase name }}Form.component';
import { {{ pascalCase name }}FormFields } from '../{{ pascalCase name }}Form/{{ pascalCase name }}Form.component';
import {  {{ camelCase name }}ListItemFragment } from '../{{ pascalCase name }}List/{{ pascalCase name }}List.graphql';


export const add{{ pascalCase name }}Mutation = gql(/* GraphQL */ `
  mutation add{{ pascalCase name }}Mutation($input: Create{{ pascalCase name }}MutationInput!) {
    create{{ pascalCase name }}(input: $input) {
      {{ pascalCase name }}Edge {
        node {
          id
          name
        }
      }
    }
  }
`);

export const Add{{ pascalCase name }} = () => {
  const generateLocalePath = useGenerateLocalePath();
  const { toast } = useToast();
  const intl = useIntl();
  const navigate = useNavigate();

  const successMessage = intl.formatMessage({
    id: '{{ pascalCase name }} form / Success message',
    defaultMessage: 'ðŸŽ‰ Item added successfully!',
  });

  const [commit{{ pascalCase name }}FormMutation, { error, loading: loadingMutation }] = useMutation(add{{ pascalCase name }}Mutation, {
    update(cache, { data }) {
      cache.modify({
        fields: {
          all{{ pascalCase name }}s(existingConnection = { edges: [] }) {
            const node = data?.create{{ pascalCase name }}?.{{ pascalCase name }}Edge?.node;
            if (!node) {
              return existingConnection;
            }
            const newItem = {
              node: cache.writeFragment({
                data: node,
                fragment: {{ camelCase name }}ListItemFragment,
              }),
              __typename: '{{ pascalCase name }}Edge',
            };
            return { ...existingConnection, edges: [...existingConnection.edges, newItem] };
          },
        },
      });
    },
    onCompleted: (data) => {
      const id = data?.create{{ pascalCase name }}?.{{ pascalCase name }}Edge?.node?.id;

      trackEvent('crud', 'add', id);

      toast({ description: successMessage });

      navigate(generateLocalePath(RoutesConfig.{{ pascalCase name }}.list));
    },
  });

  const onFormSubmit = (formData: {{ pascalCase name }}FormFields) => {
    commit{{ pascalCase name }}FormMutation({
      variables: {
        input: { name: formData.name },
      },
    });
  };

  return (
    <PageLayout>
      <PageHeadline
        hasBackButton
        header={<FormattedMessage defaultMessage="Add CRUD Example Item" id="Add{{ pascalCase name }} / Header" />}
      />

      <{{ pascalCase name }}Form onSubmit={onFormSubmit} error={error} loading={loadingMutation} />
    </PageLayout>
  );
};
