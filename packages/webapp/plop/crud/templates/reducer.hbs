import { createReducer, PayloadAction } from '@reduxjs/toolkit';
import { prop, uniqBy } from 'ramda';
import {
  {{ pascalCase name }}ApiGetResponseData,
  {{ pascalCase name }}ApiPostResponseData,
} from '../../shared/services/api/{{ camelCase name }}/types';
import * as {{ camelCase name }}Actions from './{{ camelCase name }}.actions';
import { {{ pascalCase name }}State } from './{{ camelCase name }}.types';

export const INITIAL_STATE: {{ pascalCase name }}State = {
  items: [],
};

const handleFetch{{ pascalCase name }}ListSuccess = (
  state: {{ pascalCase name }}State,
  { payload }: PayloadAction<{{ pascalCase name }}ApiGetResponseData[]>
) => {
  state.items = payload;
};

const handleFetch{{ pascalCase name }}Success = (
  state: {{ pascalCase name }}State,
  { payload }: PayloadAction<{{ pascalCase name }}ApiGetResponseData>
) => {
  state.items.push(payload);
  state.items = uniqBy(prop('id'), state.items);
};

const handleAdd{{ pascalCase name }}Resolved = (
  state: {{ pascalCase name }}State,
  { payload }: PayloadAction<{{ pascalCase name }}ApiPostResponseData>
) => {
  if (!payload.isError) {
    state.items.push(payload);
    state.items = uniqBy(prop('id'), state.items);
  }
};

const handleDelete{{ pascalCase name }} = (state: {{ pascalCase name }}State, { payload }: PayloadAction<string>) => {
  state.items = state.items.filter((item) => item.id !== payload);
};

export const reducer = createReducer(INITIAL_STATE, (builder) => {
  builder.addCase({{ camelCase name }}Actions.fetch{{ pascalCase name }}List.resolved, handleFetch{{ pascalCase name }}ListSuccess);
  builder.addCase({{ camelCase name }}Actions.fetch{{ pascalCase name }}.resolved, handleFetch{{ pascalCase name }}Success);
  builder.addCase({{ camelCase name }}Actions.add{{ pascalCase name }}.resolved, handleAdd{{ pascalCase name }}Resolved);
  builder.addCase({{ camelCase name }}Actions.update{{ pascalCase name }}.resolved, handleAdd{{ pascalCase name }}Resolved);
  builder.addCase({{ camelCase name }}Actions.delete{{ pascalCase name }}, handleDelete{{ pascalCase name }});
});
