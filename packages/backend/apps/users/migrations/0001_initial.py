# Generated by Django 4.2 on 2023-06-12 12:42

import os
import common.models
import common.storages
from common.acl.helpers import CommonGroups
from django.conf import settings
from django.contrib.auth.hashers import make_password
from django.contrib.postgres.operations import CreateCollation
from django.db import migrations, models
import django.db.models.deletion
import hashid_field.field


default_groups = ["admin", "user"]


def create_default_groups(apps, schema_editor):
    db_alias = schema_editor.connection.alias

    Group = apps.get_model("auth", "Group")
    Group.objects.using(db_alias).bulk_create([Group(name=name) for name in default_groups])

    users_group = Group.objects.using(db_alias).get(name="user")
    User = apps.get_model("users", "User")
    users = User.objects.using(db_alias)
    for user in users:
        user.groups.add(users_group)


def remove_default_groups(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    Group.objects.filter(name__in=default_groups).delete()


def create_default_superuser(apps, schema_editor):
    if "ADMIN_EMAIL" in os.environ and "ADMIN_DEFAULT_PASSWORD" in os.environ:
        User = apps.get_model('users', 'User')

        user = User(email=os.getenv("ADMIN_EMAIL"), is_superuser=True)
        user.password = make_password(os.getenv('ADMIN_DEFAULT_PASSWORD'))
        user.save()

        Group = apps.get_model("auth", "Group")
        user_group = Group.objects.get(name=CommonGroups.User)
        user.groups.add(user_group)

        UserProfile = apps.get_model('users', 'UserProfile')
        UserProfile.objects.create(user=user)


def remove_default_superuser(apps, schema_editor):
    if "ADMIN_EMAIL" in os.environ:
        User = apps.get_model('users', 'User')
        User.objects.get(email=os.getenv('ADMIN_EMAIL')).delete()


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        CreateCollation(
            name='case_insensitive',
            provider="icu",
            locale='und-u-ks-level2',
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                (
                    'id',
                    hashid_field.field.HashidAutoField(
                        alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',
                        min_length=7,
                        prefix='',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ('created', models.DateTimeField(auto_now_add=True)),
                (
                    'email',
                    models.EmailField(
                        db_collation='case_insensitive', max_length=255, unique=True, verbose_name='email address'
                    ),
                ),
                ('is_confirmed', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
                ('otp_enabled', models.BooleanField(default=False)),
                ('otp_verified', models.BooleanField(default=False)),
                ('otp_auth_url', models.CharField(blank=True, default='', max_length=255)),
                ('otp_base32', models.CharField(blank=True, default='', max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserAvatar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'original',
                    models.ImageField(
                        null=True,
                        storage=common.storages.PublicS3Boto3StorageWithCDN,
                        upload_to=common.storages.UniqueFilePathGenerator('avatars'),
                    ),
                ),
                (
                    'thumbnail',
                    models.ImageField(
                        null=True,
                        storage=common.storages.PublicS3Boto3StorageWithCDN,
                        upload_to=common.storages.UniqueFilePathGenerator('avatars/thumbnails'),
                    ),
                ),
            ],
            bases=(common.models.ImageWithThumbnailMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, default='', max_length=40)),
                ('last_name', models.CharField(blank=True, default='', max_length=40)),
                (
                    'avatar',
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='user_profile',
                        to='users.useravatar',
                    ),
                ),
                (
                    'user',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.RunPython(
            code=create_default_groups,
            reverse_code=remove_default_groups,
        ),
        migrations.RunPython(
            code=create_default_superuser,
            reverse_code=remove_default_superuser,
        ),
    ]
