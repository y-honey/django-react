service: "${env:PROJECT_NAME}-workers"

provider:
  name: aws
  runtime: 'nodejs16.x'
  versionFunctions: false
  stage: "${env:ENV_STAGE}"
  region: "${env:AWS_DEFAULT_REGION}"
  stackName: ${file(./${self:custom.confFile.${self:provider.stage}}):stackName}
  iamRoleStatements: ${file(./${self:custom.confFile.${self:provider.stage}}):iam}
  environment: ${file(./${self:custom.confFile.${self:provider.stage}}):environment}
  apiGateway:
    websocketApiId: ${file(./${self:custom.confFile.${self:provider.stage}}):websocketApiId}
  tracing:
    lambda: true

functions:
  ScheduleTask:
    handler: scheduler.handlers.schedule_task
    runtime: python3.9
    timeout: 20
    memorySize: 128
    environment: ${file(./${self:custom.confFile.${self:provider.stage}}):ScheduleTask.environment}
    events:
      - eventBridge:
          eventBus: '${self:custom.eventBusArn}'
          pattern:
            source:
              - backend.scheduler

  ExecuteScheduledTask:
    handler: scheduler.handlers.execute_task
    runtime: python3.9
    timeout: 6
    memorySize: 128
    environment: ${file(./${self:custom.confFile.${self:provider.stage}}):ExecuteScheduledTask.environment}

  SendEmail:
    handler: ${file(./${self:custom.confFile.${self:provider.stage}}):SendEmail.handler}
    timeout: 6
    memorySize: 128
    environment: ${file(./${self:custom.confFile.${self:provider.stage}}):SendEmail.environment}
    events:
      - eventBridge:
          eventBus: "${self:custom.eventBusArn}"
          pattern:
            source:
              - backend.email

  SynchronizeContentfulContent:
    handler: content.handlers.synchronize_content
    runtime: python3.9
    timeout: 30
    memorySize: 256
    environment: ${file(./${self:custom.confFile.${self:provider.stage}}):SynchronizeContentfulContent.environment}
    vpc: ${file(./${self:custom.confFile.${self:provider.stage}}):vpc}
    events:
      - schedule: rate(5 minutes)
      - eventBridge:
          eventBus: "${self:custom.eventBusArn}"
          pattern:
            source:
              - backend.contentfulSync

  WebSocketsConnectHandler:
    handler: websockets.handlers.connect.handle
    runtime: python3.9
    timeout: 30
    memorySize: 256
    environment: ${file(./${self:custom.confFile.${self:provider.stage}}):WebSocketsHandler.environment}
    vpc: ${file(./${self:custom.confFile.${self:provider.stage}}):vpc}
    events:
      - websocket: $connect

  WebSocketsMessageHandler:
    handler: websockets.handlers.message.handle
    runtime: python3.9
    timeout: 30
    memorySize: 256
    environment: ${file(./${self:custom.confFile.${self:provider.stage}}):WebSocketsHandler.environment}
    vpc: ${file(./${self:custom.confFile.${self:provider.stage}}):vpc}
    events:
      - websocket: $default

  WebSocketsDisconnectHandler:
    handler: websockets.handlers.disconnect.handle
    runtime: python3.9
    timeout: 30
    memorySize: 256
    environment: ${file(./${self:custom.confFile.${self:provider.stage}}):WebSocketsHandler.environment}
    vpc: ${file(./${self:custom.confFile.${self:provider.stage}}):vpc}
    events:
      - websocket: $disconnect

plugins:
  - serverless-step-functions
  - serverless-esbuild
  - serverless-localstack

custom:
  projectEnvName: "${env:PROJECT_NAME}-${env:ENV_STAGE}"
  eventBusArn: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/${self:custom.projectEnvName}-workers"
  pythonRequirements:
    dockerizePip: non-linux
    useDownloadCache: true
    useStaticCache: false

  ssmService: env-${env:PROJECT_NAME}-${self:provider.stage}-workers

  esbuild: ${file(./${self:custom.confFile.${self:provider.stage}}):esbuild}

  confFile:
    local: workers.conf.local.yml
    dev: workers.conf.yml
    qa: workers.conf.yml
    prod: workers.conf.yml

  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - local
    host: http://localstack  # optional - LocalStack host to connect to
    edgePort: 4566  # optional - LocalStack edge port to connect to
    autostart: false  # optional - Start LocalStack in Docker on Serverless deploy

package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - .git/**
    - node_modules/**
    - aws/**

stepFunctions:
  stateMachines:
    TaskSchedulingStateMachine:
      id: TaskSchedulingStateMachineID
      name: "${opt:stage, self:provider.stage}-TaskSchedulingStateMachine"
      definition:
        Comment: "Schedules task execution"
        StartAt: WaitForDueDate
        States:
          WaitForDueDate:
            Type: Wait
            TimestampPath: "$.due_date"
            Next: Execute
          Execute:
            Type: Task
            Resource:
              Fn::GetAtt: [ ExecuteScheduledTask, Arn ]
            End: true
